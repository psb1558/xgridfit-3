<?xml version="1.0" encoding="UTF-8"?>
<!--
       Licensed under the Apache License, Version 2.0.
       Copyright (c) 2006-20 by Peter S. Baker
-->
<grammar ns="http://xgridfit.sourceforge.net/Xgridfit2" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <define name="YESNO">
    <choice>
      <value>yes</value>
      <value>no</value>
    </choice>
  </define>
  <define name="various">
    <choice>
      <ref name="message"/>
      <ref name="no-warning"/>
      <ref name="getinfo"/>
    </choice>
  </define>
  <define name="movements">
    <choice>
      <ref name="sh"/>
      <ref name="al"/>
      <ref name="ip"/>
      <ref name="iup"/>
      <ref name="top.level.mv"/>
      <ref name="top.level.delta"/>
      <ref name="control-value-delta"/>
    </choice>
  </define>
  <define name="graphics">
    <choice>
      <ref name="setvs"/>
      <ref name="set-minimum-distance"/>
      <ref name="srp"/>
      <ref name="set-round-state"/>
      <ref name="disable-instructions"/>
      <ref name="enable-instructions"/>
      <ref name="set-dropout-control"/>
      <ref name="set-dropout-type"/>
      <ref name="setcv"/>
      <ref name="set-control-value-cut-in"/>
      <ref name="set-delta-base"/>
      <ref name="set-delta-shift"/>
      <ref name="with-minimum-distance"/>
      <ref name="with-round-state"/>
      <ref name="wcv"/>
      <ref name="with-control-value-cut-in"/>
      <ref name="with-delta-base"/>
      <ref name="with-delta-shift"/>
      <ref name="restore-default"/>
    </choice>
  </define>
  <define name="vars">
    <choice>
      <ref name="set-equal"/>
      <ref name="round"/>
    </choice>
  </define>
  <define name="flow">
    <choice>
      <ref name="callf"/>
      <ref name="callm"/>
      <ref name="callg"/>
      <ref name="callp"/>
      <ref name="if"/>
      <ref name="compile-if"/>
    </choice>
  </define>
  <define name="primitive">
    <choice>
      <ref name="command"/>
      <ref name="push"/>
    </choice>
  </define>
  <define name="programming">
    <choice>
      <ref name="various"/>
      <ref name="movements"/>
      <ref name="graphics"/>
      <ref name="vars"/>
      <ref name="flow"/>
      <ref name="primitive"/>
    </choice>
  </define>
  <define name="token.pnm">
    <data type="token">
      <param name="pattern">\.notdef|[A-Za-z_][A-Za-z0-9_\.]{0,30}</param>
    </data>
  </define>
  <define name="att.p">
    <attribute name="p"/>
  </define>
  <define name="att.r">
    <attribute name="r"/>
  </define>
  <define name="att.val">
    <attribute name="val"/>
  </define>
  <define name="att.n">
    <attribute name="n"/>
  </define>
  <define name="att.nm">
    <attribute name="nm">
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="att.ref">
    <attribute name="ref">
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="att.target">
    <attribute name="target">
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="att.color">
    <attribute name="color">
      <choice>
        <value>gray</value>
        <value>black</value>
        <value>white</value>
      </choice>
    </attribute>
  </define>
  <define name="att.axis">
    <attribute name="axis">
      <choice>
        <value>x</value>
        <value>y</value>
      </choice>
    </attribute>
  </define>
  <define name="att.unit">
    <attribute name="unit">
      <choice>
        <value>pixel</value>
        <value>font</value>
      </choice>
    </attribute>
  </define>
  <define name="att.units.per.pixel">
    <attribute name="units-per-pixel">
      <choice>
        <value>2</value>
        <value>4</value>
        <value>8</value>
        <value>16</value>
        <value>32</value>
        <value>64</value>
      </choice>
    </attribute>
  </define>
  <define name="att.to-line">
    <attribute name="to-line">
      <choice>
        <value>orthogonal</value>
        <value>parallel</value>
      </choice>
    </attribute>
  </define>
  <define name="att.result-to">
    <attribute name="result-to">
      <data type="NCName"/>
    </attribute>
  </define>
  <define name="att.test">
    <attribute name="test"/>
  </define>
  <define name="att.grid-fitted">
    <attribute name="grid-fitted">
      <ref name="YESNO"/>
    </attribute>
  </define>
  <define name="att.whichpointer">
    <attribute name="whichpointer"/>
  </define>
  <define name="att.id">
    <attribute name="xml:id">
      <data type="ID"/>
    </attribute>
  </define>
  <define name="att.round">
    <attribute name="round"/>
  </define>
  <define name="att.set-rp0">
    <attribute name="set-rp0">
      <ref name="YESNO"/>
    </attribute>
  </define>
  <define name="att.cut-in">
    <attribute name="cut-in">
      <ref name="YESNO"/>
    </attribute>
  </define>
  <define name="att.compile-if">
    <attribute name="compile-if"/>
  </define>
  <define name="att.di">
    <attribute name="di"/>
  </define>
  <define name="att.pixel-distance">
    <attribute name="pixel-distance"/>
  </define>
  <define name="att.boolean.min-distance">
    <attribute name="min-distance">
      <ref name="YESNO"/>
    </attribute>
  </define>
  <define name="att.val.min-distance">
    <attribute name="min-distance"/>
  </define>
  <define name="att.pnm">
    <attribute name="pnm">
      <ref name="token.pnm"/>
    </attribute>
  </define>
  <define name="attlist.single.op">
    <ref name="att.val"/>
    <optional>
      <ref name="att.result-to"/>
    </optional>
  </define>
  <define name="attlist.val.with.name">
    <ref name="att.val"/>
    <ref name="att.nm"/>
  </define>
  <define name="attlist.delta-set-basic">
    <attribute name="size">
      <data type="nonNegativeInteger">
        <param name="maxInclusive">47</param>
      </data>
    </attribute>
    <attribute name="di">
      <data type="int">
        <param name="pattern">[\-]?[1-8]</param>
      </data>
    </attribute>
  </define>
  <define name="attlist.vector.components">
    <attribute name="x-component"/>
    <attribute name="y-component"/>
  </define>
  <define name="attlist.vector.store">
    <optional>
      <attribute name="x-component">
        <data type="NCName"/>
      </attribute>
      <attribute name="y-component">
        <data type="NCName"/>
      </attribute>
    </optional>
  </define>
  <define name="attlist.measurement">
    <optional>
      <ref name="att.grid-fitted"/>
    </optional>
    <optional>
      <ref name="att.result-to"/>
    </optional>
  </define>
  <define name="model.set-vector">
    <ref name="att.axis"/>
  </define>
  <define name="model.with-vector">
    <ref name="att.axis"/>
    <zeroOrMore>
      <ref name="programming"/>
    </zeroOrMore>
  </define>
  <!--
    
    Top level
    
  -->
  <define name="xgridfit">
    <element name="xgridfit">
      <interleave>
        <optional>
          <ref name="att.id"/>
        </optional>
        <optional>
          <ref name="glyph-select"/>
        </optional>
        <optional>
          <ref name="infile"/>
        </optional>
        <optional>
          <ref name="outfile"/>
        </optional>
        <optional>
          <ref name="outfile-base"/>
        </optional>
        <optional>
          <ref name="no-compile"/>
        </optional>
        <optional>
          <ref name="legacy-functions"/>
        </optional>
        <optional>
          <ref name="prep"/>
        </optional>
        <zeroOrMore>
          <ref name="cn"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="alias"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="var"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="round-state"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="default"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="cv"/>
        </zeroOrMore>
        <optional>
          <ref name="cvar"/>
        </optional>
        <zeroOrMore>
          <ref name="fn"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="mo"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="gl"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="xg.xi.include"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <!--
    
    Value declarations
    
  -->
  <define name="cn">
    <element name="cn">
      <ref name="attlist.val.with.name"/>
      <empty/>
    </element>
  </define>
  <define name="var">
    <element name="var">
      <ref name="attlist.var"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.var" combine="interleave">
    <ref name="att.nm"/>
    <optional>
      <ref name="att.val"/>
    </optional>
  </define>
  <define name="alias">
    <element name="alias">
      <ref name="attlist.alias"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.alias" combine="interleave">
    <ref name="att.nm"/>
    <ref name="att.target"/>
  </define>
  <!--
    
    Controlling compilation of glyph programs
    
  -->
  <define name="glyph-select">
    <element name="glyph-select">
      <list>
        <zeroOrMore>
          <ref name="token.pnm"/>
        </zeroOrMore>
      </list>
    </element>
  </define>
  <define name="no-compile">
    <element name="no-compile">
      <zeroOrMore>
        <choice>
          <ref name="gl"/>
          <ref name="xg.xi.include"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!--
    
    Script I/O
    
  -->
  <define name="infile">
    <element name="infile">
      <text/>
    </element>
  </define>
  <define name="outfile">
    <element name="outfile">
      <text/>
    </element>
  </define>
  <define name="outfile-base">
    <element name="outfile-base">
      <data type="anyURI"/>
    </element>
  </define>
  <!--
    
    Top-level declarations
    
  -->
  <define name="round-state">
    <element name="round-state">
      <ref name="attlist.round-state"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.round-state" combine="interleave">
    <ref name="att.nm"/>
    <attribute name="period">
      <choice>
        <value>half-pixel</value>
        <value>one-pixel</value>
        <value>two-pixel</value>
      </choice>
    </attribute>
    <attribute name="phase">
      <choice>
        <value>zero</value>
        <value>one-quarter</value>
        <value>one-half</value>
        <value>three-quarters</value>
      </choice>
    </attribute>
    <attribute name="threshold">
      <choice>
        <value>period-minus-one</value>
        <value>minus-three-eighths</value>
        <value>minus-one-quarter</value>
        <value>minus-one-eighth</value>
        <value>zero</value>
        <value>one-eighth</value>
        <value>one-quarter</value>
        <value>three-eighths</value>
        <value>one-half</value>
        <value>five-eighths</value>
        <value>three-quarters</value>
        <value>seven-eighths</value>
        <value>one</value>
        <value>nine-eighths</value>
        <value>five-quarters</value>
        <value>eleven-eighths</value>
      </choice>
    </attribute>
  </define>
  <define name="default">
    <element name="default">
      <ref name="attlist.default"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.default" combine="interleave">
    <attribute name="type">
      <choice>
        <value>minimum-distance</value>
        <value>control-value-cut-in</value>
        <value>single-width</value>
        <value>single-width-cut-in</value>
        <value>delta-base</value>
        <value>delta-shift</value>
        <value>delta-break</value>
        <value>push-break</value>
        <value>max-twilight-points</value>
        <value>max-storage</value>
        <value>legacy-storage</value>
        <value>max-stack</value>
        <value>use-truetype-defaults</value>
        <value>round-state</value>
        <value>function-base</value>
        <value>compile-globals</value>
        <value>init-graphics</value>
        <value>color</value>
        <value>delete-all</value>
        <value>combine-prep</value>
        <value>auto-instr</value>
        <value>auto-hint</value>
        <value>cv-num-in-compile-if</value>
      </choice>
    </attribute>
    <ref name="att.val"/>
  </define>
  <define name="region">
    <element name="region">
      <ref name="attlist.region"/>
      <oneOrMore>
        <ref name="cvv"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.region" combine="interleave">
    <attribute name="tag"/>
    <attribute name="top"/>
    <attribute name="bot"/>
    <attribute name="peak"/>
  </define>
  <define name="cvar">
    <element name="cvar">
      <oneOrMore>
        <ref name="region"/>
      </oneOrMore>
    </element>
  </define>
  <define name="cvv">
    <element name="cvv">
      <ref name="attlist.cvv"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.cvv" combine="interleave">
    <optional>
      <attribute name="index"/>
    </optional>
    <ref name="att.nm"/>
    <attribute name="val">
      <data type="int"/>
    </attribute>
  </define>
  <define name="cv">
    <element name="cv">
      <ref name="attlist.cv"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.cv" combine="interleave">
    <optional>
      <attribute name="index"/>
    </optional>
    <ref name="att.nm"/>
    <attribute name="val">
      <data type="int"/>
    </attribute>
  </define>
  <define name="fn">
    <element name="fn">
      <ref name="attlist.fn"/>
      <zeroOrMore>
        <ref name="fn.pm"/>
      </zeroOrMore>
      <zeroOrMore>
        <choice>
          <ref name="var"/>
          <ref name="alias"/>
        </choice>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="variant"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.fn" combine="interleave">
    <ref name="att.nm"/>
    <optional>
      <ref name="att.id"/>
    </optional>
    <optional>
      <attribute name="num">
        <data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="return">
        <ref name="YESNO"/>
      </attribute>
    </optional>
  </define>
  <define name="variant">
    <element name="variant">
      <ref name="att.test"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="mo">
    <element name="mo">
      <ref name="attlist.mo"/>
      <zeroOrMore>
        <ref name="pm"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="alias"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.mo" combine="interleave">
    <ref name="att.nm"/>
    <optional>
      <ref name="att.id"/>
    </optional>
  </define>
  <define name="fn.pm">
    <element name="pm">
      <ref name="attlist.pm"/>
    </element>
  </define>
  <define name="pm">
    <element name="pm">
      <ref name="attlist.pm"/>
      <optional>
        <choice>
          <choice>
            <ref name="set"/>
            <ref name="range"/>
          </choice>
          <oneOrMore>
            <ref name="programming"/>
          </oneOrMore>
        </choice>
      </optional>
    </element>
  </define>
  <define name="attlist.pm" combine="interleave">
    <ref name="att.nm"/>
    <optional>
      <ref name="att.val"/>
    </optional>
  </define>
  <define name="legacy-functions">
    <element name="legacy-functions">
      <ref name="attlist.legacy-functions"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.legacy-functions" combine="interleave">
    <attribute name="max-function-defs">
      <data type="nonNegativeInteger"/>
    </attribute>
  </define>
  <define name="prep">
    <element name="prep">
      <optional>
        <ref name="att.id"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="var"/>
          <ref name="alias"/>
        </choice>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="gl">
    <element name="gl">
      <ref name="attlist.gl"/>
      <zeroOrMore>
        <ref name="pm"/>
      </zeroOrMore>
      <zeroOrMore>
        <choice>
          <ref name="cn"/>
          <ref name="alias"/>
          <ref name="var"/>
          <ref name="range"/>
          <ref name="set"/>
        </choice>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.gl" combine="interleave">
    <ref name="att.pnm"/>
    <optional>
      <attribute name="init-graphics">
        <ref name="YESNO"/>
      </attribute>
    </optional>
    <optional>
      <ref name="att.id"/>
    </optional>
  </define>
  <!--
    
    Miscellaneous / Oddball
    
  -->
  <define name="message">
    <element name="message">
      <text/>
    </element>
  </define>
  <!--
    
    Points and point structures
    
  -->
  <define name="pt">
    <element name="pt">
      <ref name="attlist.pt"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.pt" combine="interleave">
    <ref name="att.n"/>
  </define>
  <define name="ref">
    <element name="ref">
      <ref name="pt"/>
    </element>
  </define>
  <define name="dual.ref">
    <element name="ref">
      <ref name="pt"/>
      <ref name="pt"/>
    </element>
  </define>
  <define name="range">
    <element name="range">
      <ref name="attlist.range"/>
      <choice>
        <ref name="att.ref"/>
        <choice>
          <ref name="att.p"/>
          <group>
            <ref name="pt"/>
            <ref name="pt"/>
          </group>
        </choice>
      </choice>
    </element>
  </define>
  <define name="attlist.range" combine="interleave">
    <optional>
      <ref name="att.nm"/>
    </optional>
  </define>
  <define name="set">
    <element name="set">
      <ref name="attlist.set"/>
      <choice>
        <ref name="att.ref"/>
        <oneOrMore>
          <choice>
            <ref name="att.p"/>
            <ref name="pt"/>
          </choice>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <define name="attlist.set" combine="interleave">
    <optional>
      <ref name="att.nm"/>
    </optional>
  </define>
  <!--
    
    Point-moving instructions
    
  -->
  <define name="sh">
    <element name="sh">
      <ref name="attlist.sh"/>
      <optional>
        <choice>
          <ref name="att.r"/>
          <ref name="ref"/>
        </choice>
      </optional>
      <oneOrMore>
        <choice>
          <choice>
            <ref name="att.p"/>
            <ref name="pt"/>
          </choice>
          <ref name="range"/>
          <ref name="set"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.sh" combine="interleave">
    <optional>
      <attribute name="ref-ptr">
        <choice>
          <value>1</value>
          <value>2</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <ref name="att.compile-if"/>
    </optional>
    <optional>
      <ref name="att.round"/>
    </optional>
  </define>
  <define name="al">
    <element name="al">
      <optional>
        <ref name="att.compile-if"/>
      </optional>
      <optional>
        <choice>
          <ref name="att.r"/>
          <ref name="ref"/>
        </choice>
      </optional>
      <oneOrMore>
        <choice>
          <choice>
            <ref name="att.p"/>
            <ref name="pt"/>
          </choice>
          <ref name="range"/>
          <ref name="set"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="ip">
    <element name="ip">
      <ref name="attlist.ip"/>
      <optional>
        <choice>
          <ref name="att.r"/>
          <ref name="dual.ref"/>
        </choice>
      </optional>
      <oneOrMore>
        <choice>
          <choice>
            <ref name="att.p"/>
            <ref name="pt"/>
          </choice>
          <ref name="range"/>
          <ref name="set"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.ip" combine="interleave">
    <optional>
      <ref name="att.compile-if"/>
    </optional>
    <optional>
      <ref name="att.round"/>
    </optional>
  </define>
  <define name="iup">
    <element name="iup">
      <optional>
        <ref name="att.axis"/>
      </optional>
      <empty/>
    </element>
  </define>
  <define name="top.level.mv">
    <element name="mv">
      <ref name="attlist.mv"/>
      <choice>
        <group>
          <choice>
            <ref name="att.r"/>
            <ref name="ref"/>
          </choice>
          <choice>
            <ref name="att.p"/>
            <ref name="pt"/>
          </choice>
          <zeroOrMore>
            <ref name="nested.delta"/>
          </zeroOrMore>
          <interleave>
            <zeroOrMore>
              <ref name="al"/>
            </zeroOrMore>
            <zeroOrMore>
              <ref name="ip"/>
            </zeroOrMore>
            <zeroOrMore>
              <ref name="sh"/>
            </zeroOrMore>
          </interleave>
          <zeroOrMore>
            <ref name="nested.mv"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="nested.delta"/>
          </zeroOrMore>
        </group>
        <group>
          <choice>
            <ref name="att.p"/>
            <ref name="pt"/>
          </choice>
          <zeroOrMore>
            <ref name="nested.delta"/>
          </zeroOrMore>
          <interleave>
            <zeroOrMore>
              <ref name="al"/>
            </zeroOrMore>
            <zeroOrMore>
              <ref name="sh"/>
            </zeroOrMore>
          </interleave>
          <zeroOrMore>
            <ref name="nested.mv"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="nested.delta"/>
          </zeroOrMore>
        </group>
      </choice>
    </element>
  </define>
  <define name="nested.mv">
    <element name="mv">
      <ref name="attlist.mv"/>
      <choice>
        <ref name="att.p"/>
        <ref name="pt"/>
      </choice>
      <zeroOrMore>
        <ref name="nested.delta"/>
      </zeroOrMore>
      <interleave>
        <zeroOrMore>
          <ref name="al"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="ip"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="sh"/>
        </zeroOrMore>
      </interleave>
      <zeroOrMore>
        <ref name="nested.mv"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="nested.delta"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.mv" combine="interleave">
    <choice>
      <optional>
        <ref name="att.di"/>
      </optional>
      <optional>
        <ref name="att.pixel-distance"/>
      </optional>
    </choice>
    <optional>
      <ref name="att.round"/>
    </optional>
    <optional>
      <attribute name="cut-in"/>
    </optional>
    <optional>
      <ref name="att.val.min-distance"/>
    </optional>
    <optional>
      <ref name="att.color"/>
    </optional>
    <optional>
      <ref name="att.compile-if"/>
    </optional>
  </define>
  <define name="top.level.delta">
    <element name="delta">
      <optional>
        <ref name="att.compile-if"/>
      </optional>
      <choice>
        <group>
          <ref name="pt"/>
          <oneOrMore>
            <choice>
              <ref name="pt.delta-set"/>
              <ref name="empty.delta-set"/>
            </choice>
          </oneOrMore>
        </group>
        <oneOrMore>
          <ref name="pt.delta-set"/>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <define name="nested.delta">
    <element name="delta">
      <optional>
        <ref name="att.compile-if"/>
      </optional>
      <optional>
        <ref name="pt"/>
      </optional>
      <oneOrMore>
        <choice>
          <ref name="pt.delta-set"/>
          <ref name="empty.delta-set"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="control-value-delta">
    <element name="control-value-delta">
      <oneOrMore>
        <ref name="cv.delta-set"/>
      </oneOrMore>
    </element>
  </define>
  <define name="cv.delta-set">
    <element name="delta-set">
      <ref name="attlist.cv.delta-set"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.cv.delta-set" combine="interleave">
    <attribute name="cv">
      <data type="NCName"/>
    </attribute>
    <ref name="attlist.delta-set-basic"/>
  </define>
  <define name="pt.delta-set">
    <element name="delta-set">
      <ref name="attlist.delta-set-basic"/>
      <ref name="pt"/>
    </element>
  </define>
  <define name="empty.delta-set">
    <element name="delta-set">
      <ref name="attlist.delta-set-basic"/>
      <empty/>
    </element>
  </define>
  <!--
    
    Enable/disable instructions
    
  -->
  <define name="disable-instructions">
    <element name="disable-instructions">
      <empty/>
    </element>
  </define>
  <define name="enable-instructions">
    <element name="enable-instructions">
      <empty/>
    </element>
  </define>
  <!--
    
    Graphics state
    
  -->
  <define name="setvs">
    <element name="setvs">
      <ref name="model.set-vector"/>
    </element>
  </define>
  <define name="wvs">
    <element name="wvs">
      <ref name="model.with-vector"/>
    </element>
  </define>
  <define name="srp">
    <element name="srp">
      <ref name="att.whichpointer"/>
      <choice>
        <ref name="att.p"/>
        <ref name="pt"/>
      </choice>
    </element>
  </define>
  <define name="set-dropout-control">
    <element name="set-dropout-control">
      <ref name="attlist.set-dropout-control"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.set-dropout-control" combine="interleave">
    <attribute name="threshold">
      <data type="nonNegativeInteger">
        <param name="maxInclusive">255</param>
      </data>
    </attribute>
    <attribute name="flags">
      <data type="nonNegativeInteger">
        <param name="maxInclusive">63</param>
      </data>
    </attribute>
  </define>
  <define name="set-dropout-type">
    <element name="set-dropout-type">
      <ref name="att.dropout.val"/>
      <empty/>
    </element>
  </define>
  <define name="att.dropout.val">
    <attribute name="val">
      <data type="nonNegativeInteger">
        <param name="maxInclusive">7</param>
      </data>
    </attribute>
  </define>
  <define name="setcv">
    <element name="setcv">
      <ref name="attlist.setcv"/>
      <empty/>
    </element>
  </define>
  <define name="wcv">
    <element name="wcv">
      <ref name="attlist.setcv"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.setcv" combine="interleave">
    <ref name="attlist.val.with.name"/>
    <optional>
      <ref name="att.unit"/>
    </optional>
  </define>
  <define name="set-control-value-cut-in">
    <element name="set-control-value-cut-in">
      <ref name="att.val"/>
      <empty/>
    </element>
  </define>
  <define name="with-control-value-cut-in">
    <element name="with-control-value-cut-in">
      <ref name="att.val"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="set-minimum-distance">
    <element name="set-minimum-distance">
      <ref name="att.val"/>
      <empty/>
    </element>
  </define>
  <define name="with-minimum-distance">
    <element name="with-minimum-distance">
      <ref name="att.val"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="set-round-state">
    <element name="set-round-state">
      <ref name="att.round"/>
      <empty/>
    </element>
  </define>
  <define name="with-round-state">
    <element name="with-round-state">
      <ref name="att.round"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="set-delta-base">
    <element name="set-delta-base">
      <ref name="att.val"/>
      <empty/>
    </element>
  </define>
  <define name="with-delta-base">
    <element name="with-delta-base">
      <ref name="att.val"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="set-delta-shift">
    <element name="set-delta-shift">
      <ref name="att.units.per.pixel"/>
      <empty/>
    </element>
  </define>
  <define name="with-delta-shift">
    <element name="with-delta-shift">
      <ref name="att.units.per.pixel"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="restore-default">
    <element name="restore-default">
      <ref name="attlist.restore-default"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.restore-default" combine="interleave">
    <attribute name="nm">
      <choice>
        <value>minimum-distance</value>
        <value>control-value-cut-in</value>
        <value>single-width</value>
        <value>single-width-cut-in</value>
        <value>delta-base</value>
        <value>delta-shift</value>
        <value>round-state</value>
        <value>all</value>
      </choice>
    </attribute>
  </define>
  <!--
    
    Arithmetic elements
    
  -->
  <define name="set-equal">
    <element name="set-equal">
      <ref name="attlist.set-equal"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.set-equal" combine="interleave">
    <ref name="att.target"/>
    <attribute name="source"/>
  </define>
  <define name="round">
    <element name="round">
      <ref name="attlist.round"/>
      <empty/>
    </element>
  </define>
  <define name="no-round">
    <element name="no-round">
      <ref name="attlist.round"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.round" combine="interleave">
    <ref name="att.val"/>
    <optional>
      <ref name="att.color"/>
    </optional>
    <optional>
      <ref name="att.result-to"/>
    </optional>
  </define>
  <!--
    
    Function and macro calls
    
  -->
  <define name="pms">
    <element name="pms">
      <text/>
    </element>
  </define>
  <define name="callf">
    <element name="callf">
      <ref name="attlist.callf"/>
      <choice>
        <optional>
          <ref name="pms"/>
        </optional>
        <zeroOrMore>
          <ref name="fn.pmset"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="fn.wpm"/>
        </zeroOrMore>
      </choice>
    </element>
  </define>
  <define name="attlist.callf" combine="interleave">
    <ref name="att.nm"/>
    <optional>
      <ref name="att.result-to"/>
    </optional>
  </define>
  <define name="callm">
    <element name="callm">
      <ref name="att.nm"/>
      <choice>
        <optional>
          <ref name="pms"/>
        </optional>
        <zeroOrMore>
          <ref name="pmset"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="wpm"/>
        </zeroOrMore>
      </choice>
    </element>
  </define>
  <define name="callp">
    <element name="callp">
      <ref name="att.nm"/>
      <empty/>
    </element>
  </define>
  <define name="callg">
    <element name="callg">
      <ref name="att.pnm"/>
      <choice>
        <optional>
          <ref name="pms"/>
        </optional>
        <zeroOrMore>
          <ref name="wpm"/>
        </zeroOrMore>
      </choice>
    </element>
  </define>
  <define name="fn.pmset">
    <element name="pmset">
      <optional>
        <attribute name="opt">
          <ref name="YESNO"/>
        </attribute>
      </optional>
      <oneOrMore>
        <ref name="fn.wpm"/>
      </oneOrMore>
    </element>
  </define>
  <define name="pmset">
    <element name="pmset">
      <oneOrMore>
        <ref name="wpm"/>
      </oneOrMore>
    </element>
  </define>
  <define name="fn.wpm">
    <element name="wpm">
      <ref name="att.nm"/>
      <ref name="att.val"/>
      <empty/>
    </element>
  </define>
  <define name="wpm">
    <element name="wpm">
      <ref name="att.nm"/>
      <choice>
        <ref name="att.val"/>
        <group>
          <optional>
            <ref name="att.val"/>
          </optional>
          <choice>
            <choice>
              <ref name="set"/>
              <ref name="range"/>
            </choice>
            <oneOrMore>
              <ref name="programming"/>
            </oneOrMore>
          </choice>
        </group>
      </choice>
    </element>
  </define>
  <!--
    
    Conditionals
    
  -->
  <define name="if">
    <element name="if">
      <ref name="att.test"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
      <optional>
        <ref name="else"/>
      </optional>
    </element>
  </define>
  <define name="else">
    <element name="else">
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="compile-if">
    <element name="compile-if">
      <ref name="att.test"/>
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
      <optional>
        <ref name="else"/>
      </optional>
    </element>
  </define>
  <define name="no-warning">
    <element name="no-warning">
      <zeroOrMore>
        <ref name="programming"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    
    Getting info
    
  -->
  <define name="getinfo">
    <element name="getinfo">
      <ref name="attlist.getinfo"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.getinfo" combine="interleave">
    <attribute name="selector"/>
    <optional>
      <ref name="att.result-to"/>
    </optional>
  </define>
  <!--
    
    Primitives
    
  -->
  <define name="command">
    <element name="command">
      <attribute name="nm">
        <data type="token">
          <param name="pattern">[A-Z0-5]{2,9}</param>
        </data>
      </attribute>
      <choice>
        <optional>
          <attribute name="modifier"/>
        </optional>
        <zeroOrMore>
          <ref name="modifier"/>
        </zeroOrMore>
      </choice>
    </element>
  </define>
  <define name="modifier">
    <element name="modifier">
      <ref name="attlist.modifier"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.modifier" combine="interleave">
    <ref name="att.val"/>
    <attribute name="type">
      <choice>
        <value>set-rp0</value>
        <value>round</value>
        <value>minimum-distance</value>
        <value>color</value>
        <value>grid-fitted</value>
        <value>to-line</value>
        <value>axis</value>
        <value>ref-ptr</value>
      </choice>
    </attribute>
  </define>
  <define name="push">
    <element name="push">
      <text/>
    </element>
  </define>
  <!--
    
    XInclude
    
  -->
  <define name="xg.xi.include.attlist">
    <optional>
      <attribute name="href">
        <data type="anyURI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="parse" a:defaultValue="xml">
        <choice>
          <value>xml</value>
          <value>text</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="xpointer"/>
    </optional>
    <optional>
      <attribute name="encoding"/>
    </optional>
    <optional>
      <attribute name="accept"/>
    </optional>
    <optional>
      <attribute name="accept-language"/>
    </optional>
  </define>
  <define name="xg.xi.include">
    <element name="xi:include">
      <ref name="xg.xi.include.attlist"/>
    </element>
  </define>
  <start>
    <ref name="xgridfit"/>
  </start>
</grammar>
